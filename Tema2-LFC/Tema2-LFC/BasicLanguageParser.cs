//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BasicLanguage.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class BasicLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, INTEGER_VALUE=22, FLOAT_VALUE=23, 
		STRING_VALUE=24, IF=25, ELSE=26, WHILE=27, FOR=28, RETURN=29, VOID=30, 
		INT=31, FLOAT=32, DOUBLE=33, STRING=34, MAIN_FUN=35, SEMICOLON=36, LPAREN=37, 
		RPAREN=38, LBRACE=39, RBRACE=40, COMMA=41, EQUAL=42, IDENTIFIER=43, BLOCK_COMMENT=44, 
		LINE_COMMENT=45, WS=46;
	public const int
		RULE_program = 0, RULE_globalVariableDecl = 1, RULE_functionDecl = 2, 
		RULE_paramList = 3, RULE_param = 4, RULE_block = 5, RULE_statement = 6, 
		RULE_variableDecl = 7, RULE_ifStatement = 8, RULE_whileStatement = 9, 
		RULE_forStatement = 10, RULE_returnStatement = 11, RULE_exprStatement = 12, 
		RULE_expr = 13, RULE_assignmentExpr = 14, RULE_logicalExpr = 15, RULE_relationalExpr = 16, 
		RULE_additiveExpr = 17, RULE_multiplicativeExpr = 18, RULE_unaryExpr = 19, 
		RULE_postfixExpr = 20, RULE_primaryExpr = 21, RULE_exprList = 22, RULE_type = 23, 
		RULE_assignmentOp = 24;
	public static readonly string[] ruleNames = {
		"program", "globalVariableDecl", "functionDecl", "paramList", "param", 
		"block", "statement", "variableDecl", "ifStatement", "whileStatement", 
		"forStatement", "returnStatement", "exprStatement", "expr", "assignmentExpr", 
		"logicalExpr", "relationalExpr", "additiveExpr", "multiplicativeExpr", 
		"unaryExpr", "postfixExpr", "primaryExpr", "exprList", "type", "assignmentOp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'&&'", "'||'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'!'", "'++'", "'--'", "'+='", "'-='", "'*='", 
		"'/='", "'%='", null, null, null, "'if'", "'else'", "'while'", "'for'", 
		"'return'", "'void'", "'int'", "'float'", "'double'", "'string'", "'main'", 
		"';'", "'('", "')'", "'{'", "'}'", "','", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "INTEGER_VALUE", 
		"FLOAT_VALUE", "STRING_VALUE", "IF", "ELSE", "WHILE", "FOR", "RETURN", 
		"VOID", "INT", "FLOAT", "DOUBLE", "STRING", "MAIN_FUN", "SEMICOLON", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "COMMA", "EQUAL", "IDENTIFIER", "BLOCK_COMMENT", 
		"LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BasicLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BasicLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BasicLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BasicLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BasicLanguageParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableDeclContext[] globalVariableDecl() {
			return GetRuleContexts<GlobalVariableDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableDeclContext globalVariableDecl(int i) {
			return GetRuleContext<GlobalVariableDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33285996544L) != 0)) {
				{
				State = 52;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 50;
					globalVariableDecl();
					}
					break;
				case 2:
					{
					State = 51;
					functionDecl();
					}
					break;
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 57;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BasicLanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BasicLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(BasicLanguageParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public GlobalVariableDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariableDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterGlobalVariableDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitGlobalVariableDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableDeclContext globalVariableDecl() {
		GlobalVariableDeclContext _localctx = new GlobalVariableDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_globalVariableDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			type();
			State = 60;
			Match(IDENTIFIER);
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 61;
				Match(EQUAL);
				State = 62;
				expr();
				}
			}

			State = 65;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicLanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicLanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN_FUN() { return GetToken(BasicLanguageParser.MAIN_FUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BasicLanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			type();
			State = 68;
			_la = TokenStream.LA(1);
			if ( !(_la==MAIN_FUN || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 69;
			Match(LPAREN);
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33285996544L) != 0)) {
				{
				State = 70;
				paramList();
				}
			}

			State = 73;
			Match(RPAREN);
			State = 74;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicLanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicLanguageParser.COMMA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 6, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			param();
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 77;
				Match(COMMA);
				State = 78;
				param();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BasicLanguageParser.IDENTIFIER, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 8, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			type();
			State = 85;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(BasicLanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(BasicLanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(LBRACE);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9517576340480L) != 0)) {
				{
				{
				State = 88;
				statement();
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 94;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclContext variableDecl() {
			return GetRuleContext<VariableDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprStatementContext exprStatement() {
			return GetRuleContext<ExprStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
			case INT:
			case FLOAT:
			case DOUBLE:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				variableDecl();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97;
				ifStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 98;
				whileStatement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 99;
				forStatement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 100;
				returnStatement();
				}
				break;
			case T__9:
			case T__13:
			case T__14:
			case T__15:
			case INTEGER_VALUE:
			case FLOAT_VALUE:
			case STRING_VALUE:
			case LPAREN:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 101;
				exprStatement();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 102;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BasicLanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BasicLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(BasicLanguageParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterVariableDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitVariableDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclContext variableDecl() {
		VariableDeclContext _localctx = new VariableDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_variableDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			type();
			State = 106;
			Match(IDENTIFIER);
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 107;
				Match(EQUAL);
				State = 108;
				expr();
				}
			}

			State = 111;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BasicLanguageParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicLanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicLanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BasicLanguageParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(IF);
			State = 114;
			Match(LPAREN);
			State = 115;
			expr();
			State = 116;
			Match(RPAREN);
			State = 117;
			block();
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 118;
				Match(ELSE);
				State = 119;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(BasicLanguageParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicLanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicLanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(WHILE);
			State = 123;
			Match(LPAREN);
			State = 124;
			expr();
			State = 125;
			Match(RPAREN);
			State = 126;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BasicLanguageParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicLanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(BasicLanguageParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(BasicLanguageParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicLanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclContext variableDecl() {
			return GetRuleContext<VariableDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprStatementContext exprStatement() {
			return GetRuleContext<ExprStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(FOR);
			State = 129;
			Match(LPAREN);
			State = 133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
			case INT:
			case FLOAT:
			case DOUBLE:
			case STRING:
				{
				State = 130;
				variableDecl();
				}
				break;
			case T__9:
			case T__13:
			case T__14:
			case T__15:
			case INTEGER_VALUE:
			case FLOAT_VALUE:
			case STRING_VALUE:
			case LPAREN:
			case IDENTIFIER:
				{
				State = 131;
				exprStatement();
				}
				break;
			case SEMICOLON:
				{
				State = 132;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8933561451520L) != 0)) {
				{
				State = 135;
				expr();
				}
			}

			State = 138;
			Match(SEMICOLON);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8933561451520L) != 0)) {
				{
				State = 139;
				expr();
				}
			}

			State = 142;
			Match(RPAREN);
			State = 143;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(BasicLanguageParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BasicLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(RETURN);
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8933561451520L) != 0)) {
				{
				State = 146;
				expr();
				}
			}

			State = 149;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BasicLanguageParser.SEMICOLON, 0); }
		public ExprStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterExprStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitExprStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprStatementContext exprStatement() {
		ExprStatementContext _localctx = new ExprStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_exprStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			expr();
			State = 152;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExprContext assignmentExpr() {
			return GetRuleContext<AssignmentExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExprContext logicalExpr() {
			return GetRuleContext<LogicalExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_expr);
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154;
				assignmentExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 155;
				logicalExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BasicLanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOpContext assignmentOp() {
			return GetRuleContext<AssignmentOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterAssignmentExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitAssignmentExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExprContext assignmentExpr() {
		AssignmentExprContext _localctx = new AssignmentExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_assignmentExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(IDENTIFIER);
			State = 159;
			assignmentOp();
			State = 160;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExprContext[] relationalExpr() {
			return GetRuleContexts<RelationalExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExprContext relationalExpr(int i) {
			return GetRuleContext<RelationalExprContext>(i);
		}
		public LogicalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterLogicalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitLogicalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExprContext logicalExpr() {
		LogicalExprContext _localctx = new LogicalExprContext(Context, State);
		EnterRule(_localctx, 30, RULE_logicalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			relationalExpr();
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0 || _la==T__1) {
				{
				{
				State = 163;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 164;
				relationalExpr();
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExprContext[] additiveExpr() {
			return GetRuleContexts<AdditiveExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExprContext additiveExpr(int i) {
			return GetRuleContext<AdditiveExprContext>(i);
		}
		public RelationalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterRelationalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitRelationalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExprContext relationalExpr() {
		RelationalExprContext _localctx = new RelationalExprContext(Context, State);
		EnterRule(_localctx, 32, RULE_relationalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			additiveExpr();
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 504L) != 0)) {
				{
				{
				State = 171;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 504L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 172;
				additiveExpr();
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExprContext[] multiplicativeExpr() {
			return GetRuleContexts<MultiplicativeExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExprContext multiplicativeExpr(int i) {
			return GetRuleContext<MultiplicativeExprContext>(i);
		}
		public AdditiveExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterAdditiveExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitAdditiveExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExprContext additiveExpr() {
		AdditiveExprContext _localctx = new AdditiveExprContext(Context, State);
		EnterRule(_localctx, 34, RULE_additiveExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			multiplicativeExpr();
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8 || _la==T__9) {
				{
				{
				State = 179;
				_la = TokenStream.LA(1);
				if ( !(_la==T__8 || _la==T__9) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 180;
				multiplicativeExpr();
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext[] unaryExpr() {
			return GetRuleContexts<UnaryExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext unaryExpr(int i) {
			return GetRuleContext<UnaryExprContext>(i);
		}
		public MultiplicativeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExprContext multiplicativeExpr() {
		MultiplicativeExprContext _localctx = new MultiplicativeExprContext(Context, State);
		EnterRule(_localctx, 36, RULE_multiplicativeExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			unaryExpr();
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 14336L) != 0)) {
				{
				{
				State = 187;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14336L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 188;
				unaryExpr();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExprContext postfixExpr() {
			return GetRuleContext<PostfixExprContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(Context, State);
		EnterRule(_localctx, 38, RULE_unaryExpr);
		int _la;
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
			case T__13:
			case T__14:
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 194;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 115712L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 195;
				unaryExpr();
				}
				break;
			case INTEGER_VALUE:
			case FLOAT_VALUE:
			case STRING_VALUE:
			case LPAREN:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196;
				postfixExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		public PostfixExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterPostfixExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitPostfixExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExprContext postfixExpr() {
		PostfixExprContext _localctx = new PostfixExprContext(Context, State);
		EnterRule(_localctx, 40, RULE_postfixExpr);
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 199;
				primaryExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 200;
				primaryExpr();
				State = 201;
				Match(T__14);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 203;
				primaryExpr();
				State = 204;
				Match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BasicLanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(BasicLanguageParser.INTEGER_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_VALUE() { return GetToken(BasicLanguageParser.FLOAT_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(BasicLanguageParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicLanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicLanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterPrimaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitPrimaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, State);
		EnterRule(_localctx, 42, RULE_primaryExpr);
		int _la;
		try {
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209;
				Match(INTEGER_VALUE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 210;
				Match(FLOAT_VALUE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 211;
				Match(STRING_VALUE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 212;
				Match(LPAREN);
				State = 213;
				expr();
				State = 214;
				Match(RPAREN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 216;
				Match(IDENTIFIER);
				State = 217;
				Match(LPAREN);
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8933561451520L) != 0)) {
					{
					State = 218;
					exprList();
					}
				}

				State = 221;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicLanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicLanguageParser.COMMA, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 44, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			expr();
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 225;
				Match(COMMA);
				State = 226;
				expr();
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(BasicLanguageParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(BasicLanguageParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(BasicLanguageParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BasicLanguageParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(BasicLanguageParser.VOID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 33285996544L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(BasicLanguageParser.EQUAL, 0); }
		public AssignmentOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.EnterAssignmentOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicLanguageListener typedListener = listener as IBasicLanguageListener;
			if (typedListener != null) typedListener.ExitAssignmentOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicLanguageVisitor<TResult> typedVisitor = visitor as IBasicLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOpContext assignmentOp() {
		AssignmentOpContext _localctx = new AssignmentOpContext(Context, State);
		EnterRule(_localctx, 48, RULE_assignmentOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4398050574336L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,46,237,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,5,0,53,8,0,10,0,12,0,56,9,0,1,0,
		1,0,1,1,1,1,1,1,1,1,3,1,64,8,1,1,1,1,1,1,2,1,2,1,2,1,2,3,2,72,8,2,1,2,
		1,2,1,2,1,3,1,3,1,3,5,3,80,8,3,10,3,12,3,83,9,3,1,4,1,4,1,4,1,5,1,5,5,
		5,90,8,5,10,5,12,5,93,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,104,
		8,6,1,7,1,7,1,7,1,7,3,7,110,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,
		8,121,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,3,10,134,8,
		10,1,10,3,10,137,8,10,1,10,1,10,3,10,141,8,10,1,10,1,10,1,10,1,11,1,11,
		3,11,148,8,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,3,13,157,8,13,1,14,1,
		14,1,14,1,14,1,15,1,15,1,15,5,15,166,8,15,10,15,12,15,169,9,15,1,16,1,
		16,1,16,5,16,174,8,16,10,16,12,16,177,9,16,1,17,1,17,1,17,5,17,182,8,17,
		10,17,12,17,185,9,17,1,18,1,18,1,18,5,18,190,8,18,10,18,12,18,193,9,18,
		1,19,1,19,1,19,3,19,198,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,207,
		8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,220,8,
		21,1,21,3,21,223,8,21,1,22,1,22,1,22,5,22,228,8,22,10,22,12,22,231,9,22,
		1,23,1,23,1,24,1,24,1,24,0,0,25,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,0,8,2,0,35,35,43,43,1,0,1,2,1,0,3,8,1,0,
		9,10,1,0,11,13,2,0,10,10,14,16,1,0,30,34,2,0,17,21,42,42,245,0,54,1,0,
		0,0,2,59,1,0,0,0,4,67,1,0,0,0,6,76,1,0,0,0,8,84,1,0,0,0,10,87,1,0,0,0,
		12,103,1,0,0,0,14,105,1,0,0,0,16,113,1,0,0,0,18,122,1,0,0,0,20,128,1,0,
		0,0,22,145,1,0,0,0,24,151,1,0,0,0,26,156,1,0,0,0,28,158,1,0,0,0,30,162,
		1,0,0,0,32,170,1,0,0,0,34,178,1,0,0,0,36,186,1,0,0,0,38,197,1,0,0,0,40,
		206,1,0,0,0,42,222,1,0,0,0,44,224,1,0,0,0,46,232,1,0,0,0,48,234,1,0,0,
		0,50,53,3,2,1,0,51,53,3,4,2,0,52,50,1,0,0,0,52,51,1,0,0,0,53,56,1,0,0,
		0,54,52,1,0,0,0,54,55,1,0,0,0,55,57,1,0,0,0,56,54,1,0,0,0,57,58,5,0,0,
		1,58,1,1,0,0,0,59,60,3,46,23,0,60,63,5,43,0,0,61,62,5,42,0,0,62,64,3,26,
		13,0,63,61,1,0,0,0,63,64,1,0,0,0,64,65,1,0,0,0,65,66,5,36,0,0,66,3,1,0,
		0,0,67,68,3,46,23,0,68,69,7,0,0,0,69,71,5,37,0,0,70,72,3,6,3,0,71,70,1,
		0,0,0,71,72,1,0,0,0,72,73,1,0,0,0,73,74,5,38,0,0,74,75,3,10,5,0,75,5,1,
		0,0,0,76,81,3,8,4,0,77,78,5,41,0,0,78,80,3,8,4,0,79,77,1,0,0,0,80,83,1,
		0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,7,1,0,0,0,83,81,1,0,0,0,84,85,3,46,
		23,0,85,86,5,43,0,0,86,9,1,0,0,0,87,91,5,39,0,0,88,90,3,12,6,0,89,88,1,
		0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,94,1,0,0,0,93,91,1,
		0,0,0,94,95,5,40,0,0,95,11,1,0,0,0,96,104,3,14,7,0,97,104,3,16,8,0,98,
		104,3,18,9,0,99,104,3,20,10,0,100,104,3,22,11,0,101,104,3,24,12,0,102,
		104,3,10,5,0,103,96,1,0,0,0,103,97,1,0,0,0,103,98,1,0,0,0,103,99,1,0,0,
		0,103,100,1,0,0,0,103,101,1,0,0,0,103,102,1,0,0,0,104,13,1,0,0,0,105,106,
		3,46,23,0,106,109,5,43,0,0,107,108,5,42,0,0,108,110,3,26,13,0,109,107,
		1,0,0,0,109,110,1,0,0,0,110,111,1,0,0,0,111,112,5,36,0,0,112,15,1,0,0,
		0,113,114,5,25,0,0,114,115,5,37,0,0,115,116,3,26,13,0,116,117,5,38,0,0,
		117,120,3,10,5,0,118,119,5,26,0,0,119,121,3,10,5,0,120,118,1,0,0,0,120,
		121,1,0,0,0,121,17,1,0,0,0,122,123,5,27,0,0,123,124,5,37,0,0,124,125,3,
		26,13,0,125,126,5,38,0,0,126,127,3,10,5,0,127,19,1,0,0,0,128,129,5,28,
		0,0,129,133,5,37,0,0,130,134,3,14,7,0,131,134,3,24,12,0,132,134,5,36,0,
		0,133,130,1,0,0,0,133,131,1,0,0,0,133,132,1,0,0,0,134,136,1,0,0,0,135,
		137,3,26,13,0,136,135,1,0,0,0,136,137,1,0,0,0,137,138,1,0,0,0,138,140,
		5,36,0,0,139,141,3,26,13,0,140,139,1,0,0,0,140,141,1,0,0,0,141,142,1,0,
		0,0,142,143,5,38,0,0,143,144,3,10,5,0,144,21,1,0,0,0,145,147,5,29,0,0,
		146,148,3,26,13,0,147,146,1,0,0,0,147,148,1,0,0,0,148,149,1,0,0,0,149,
		150,5,36,0,0,150,23,1,0,0,0,151,152,3,26,13,0,152,153,5,36,0,0,153,25,
		1,0,0,0,154,157,3,28,14,0,155,157,3,30,15,0,156,154,1,0,0,0,156,155,1,
		0,0,0,157,27,1,0,0,0,158,159,5,43,0,0,159,160,3,48,24,0,160,161,3,26,13,
		0,161,29,1,0,0,0,162,167,3,32,16,0,163,164,7,1,0,0,164,166,3,32,16,0,165,
		163,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,31,1,0,
		0,0,169,167,1,0,0,0,170,175,3,34,17,0,171,172,7,2,0,0,172,174,3,34,17,
		0,173,171,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,
		33,1,0,0,0,177,175,1,0,0,0,178,183,3,36,18,0,179,180,7,3,0,0,180,182,3,
		36,18,0,181,179,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,
		0,184,35,1,0,0,0,185,183,1,0,0,0,186,191,3,38,19,0,187,188,7,4,0,0,188,
		190,3,38,19,0,189,187,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,
		1,0,0,0,192,37,1,0,0,0,193,191,1,0,0,0,194,195,7,5,0,0,195,198,3,38,19,
		0,196,198,3,40,20,0,197,194,1,0,0,0,197,196,1,0,0,0,198,39,1,0,0,0,199,
		207,3,42,21,0,200,201,3,42,21,0,201,202,5,15,0,0,202,207,1,0,0,0,203,204,
		3,42,21,0,204,205,5,16,0,0,205,207,1,0,0,0,206,199,1,0,0,0,206,200,1,0,
		0,0,206,203,1,0,0,0,207,41,1,0,0,0,208,223,5,43,0,0,209,223,5,22,0,0,210,
		223,5,23,0,0,211,223,5,24,0,0,212,213,5,37,0,0,213,214,3,26,13,0,214,215,
		5,38,0,0,215,223,1,0,0,0,216,217,5,43,0,0,217,219,5,37,0,0,218,220,3,44,
		22,0,219,218,1,0,0,0,219,220,1,0,0,0,220,221,1,0,0,0,221,223,5,38,0,0,
		222,208,1,0,0,0,222,209,1,0,0,0,222,210,1,0,0,0,222,211,1,0,0,0,222,212,
		1,0,0,0,222,216,1,0,0,0,223,43,1,0,0,0,224,229,3,26,13,0,225,226,5,41,
		0,0,226,228,3,26,13,0,227,225,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,
		229,230,1,0,0,0,230,45,1,0,0,0,231,229,1,0,0,0,232,233,7,6,0,0,233,47,
		1,0,0,0,234,235,7,7,0,0,235,49,1,0,0,0,23,52,54,63,71,81,91,103,109,120,
		133,136,140,147,156,167,175,183,191,197,206,219,222,229
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
